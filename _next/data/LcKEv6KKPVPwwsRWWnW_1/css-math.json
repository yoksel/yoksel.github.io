{"pageProps":{"article":{"title":"Математические функции в CSS","slug":"css-math","content":"<p>В CSS есть <a href=\"https://www.w3.org/TR/css-values-4/#calc-notation\">математические функции</a>, их всего четыре: <code>min()</code>, <code>max()</code>, <code>clamp()</code> и <code>calc()</code>.</p>\n<p>Математика в каком-то виде есть и в препроцессорах, например, в SCSS есть <code>min()</code>, <code>max()</code> и <code>clamp()</code>, в Less — <code>min()</code> и <code>max()</code>, но есть пара существенных отличий. Во-первых, в препроцессорах всё рассчитывается один раз при компиляции, и в итоговом файле всегда будут фиксированные значения. А во-вторых, в препроцессорных функциях нельзя сочетать разные единицы измерения.</p>\n\n\n<p>Например, не получится сделать значение на основе пикселей, зависящее от единиц вьюпорта. Вот этот пример работать не будет (это SCSS):</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\">$<span class=\"token property\">base-font-size</span><span class=\"token punctuation\">:</span> 16px<span class=\"token punctuation\">;</span>\n\n<span class=\"token selector\">BODY</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> $base-font-size + 2vw<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></figure>\n<p>Компилятор будет ругаться на несочетаемые единицы.</p>\n<p>Но если перенести рассчеты в <code>calc()</code>, всё будет работать:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\">$<span class=\"token property\">base-font-size</span><span class=\"token punctuation\">:</span> 16px<span class=\"token punctuation\">;</span>\n\n<span class=\"token selector\">BODY</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">font-size: calc(#</span><span class=\"token punctuation\">{</span>$base-font-size<span class=\"token punctuation\">}</span> + 2vw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></figure>\n<p><code>calc()</code> сможет сложить пиксели и единицы вьюпорта. Это позволит сделать плавающий размер шрифта, который будет зависеть от ширины окна браузера. Препроцессоры так не умеют.</p>\n<p>Таким образом, главное преимущество математических функций в CSS — динамичность значений благодаря способности сочетать абсолютные и относительные <a href=\"/size-units/\">единицы измерения</a>.</p>\n<p>Ещё важно помнить, что при использовании препроцессоров CSS-функции могут конфликтовать с препроцессорными. Например, если в SCSS или в Less написать такое:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>350px<span class=\"token punctuation\">,</span> 50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></figure>\n<p>компилятор будет ругаться на несовместимые единицы, потому что сработает функция из препроцессора.</p>\n<p>Чтобы препроцессоры при компиляции не пытались выполнить CSS-функции, в <strong>SCSS</strong> предлагается писать имя функции с заглавной буквы:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token function\">Min</span><span class=\"token punctuation\">(</span>350px<span class=\"token punctuation\">,</span> 50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></figure>\n<p>Подробнее об этом можно почитать в статье Аны Тюдор <a href=\"https://css-tricks.com/when-sass-and-new-css-features-collide/\">When Sass and New CSS Features Collide</a>.</p>\n<p>В <strong>LESS</strong> поможет <a href=\"http://lesscss.org/#escaping\">оборачивание кавычками</a>:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> ~<span class=\"token string\">\"min(350px, 50%)\"</span><span class=\"token punctuation\">;</span>\n</code></pre></figure>\n<p>или компиляция с <a href=\"http://lesscss.org/usage/#less-options-math\">использованием параметра</a> <code>math</code> со значением <code>strict</code>.</p>\n<h2 id=min-max><a href=\"#min-max\">min(), max()</a></h2>\n\n<p>Функция <code>min()</code> возвращает минимальное из переданных значений, <code>max()</code> — максимальное. При использовании процентов или <a href=\"/size-units/#relative-units\">относительных единиц</a> выбираемое значение будет динамическим и будет зависеть от внешних условий. Например:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>350px<span class=\"token punctuation\">,</span> 50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></figure>\n<div class=\"resizable resizable--x\"><iframe height=\"350\"\n      style=\"width: 100%\"\n      title=\"yLOKwBv\"\n      src=\"https://codepen.io/yoksel/embed/yLOKwBv?&default-tab=result\"\n    ></iframe></div>\n\n<p>Если поресайзить окно с примером, можно увидеть как это работает.</p>\n<p>Если вычисленное значение для <code>50%</code> меньше <code>350px</code>, ширина блока будет равна <code>50%</code>. Как только <code>50%</code> станет больше <code>350px</code>, функция <code>min()</code> выберет меньшее значение, то есть <code>350px</code>, и дальше блок тянуться не будет.</p>\n<p>Функция <code>min()</code> будет выбирать подходящее значение учитывая ширину окна в данный момент.</p>\n<p>Этот код не делает ничего особенного, что не умел бы CSS без математических функций: точно такое же поведение можно получить задав <code>width</code> и <code>max-width</code>:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n<span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 350px<span class=\"token punctuation\">;</span>\n</code></pre></figure>\n<p>Оба варианта для сравнения:</p>\n<div class=\"resizable resizable--x\"><iframe height=\"400\"\n      style=\"width: 100%\"\n      title=\"CSS min() + max-width\"\n      src=\"https://codepen.io/yoksel/embed/xxVjMwL?&default-tab=result\"\n    ></iframe></div>\n\n<p>Порастягивайте демо, чтобы увидеть, что разницы в поведении блоков нет.</p>\n<p>На первый взгляд, <code>min()</code> и <code>max()</code> не делают ничего интересного, но если подумать, как много мест в CSS, где можно управлять <em>диапазоном</em> значений?</p>\n<p>Это доступно только для ширины и высоты:</p>\n<ul>\n<li><code>width</code>, <code>min-width</code>, <code>max-width</code></li>\n<li><code>height</code>, <code>min-height</code>, <code>max-height</code></li>\n</ul>\n<p>и их аналогов, привязанных к направлению письма:</p>\n<ul>\n<li><code>inline-size</code>, <code>min-inline-size</code>, <code>max-inline-size</code></li>\n<li><code>block-size</code>, <code>min-block-size</code>, <code>max-block-size</code></li>\n</ul>\n<p>У нас нет, например, <code>max-font-size</code> или <code>min-border-width</code>, но благодаря математическим функциям, можно добавить умную динамику практически в любое значение. Например, в размер шрифта:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>5vw<span class=\"token punctuation\">,</span> 20px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></figure>\n<div class=\"resizable resizable--x\"><iframe height=\"380\"\n      style=\"width: 100%\"\n      title=\"CSS max() in font-size\"\n      src=\"https://codepen.io/yoksel/embed/KKzRJoM?&default-tab=result\"\n    ></iframe></div>\n\n<p>Поресайзите демо, и вы увидите, что при растягивании шрифт будет бесконечно расти, но при сужении, как только <code>5vw</code> станет меньше или равным <code>20px</code>, размер шрифта застынет на этом значении.</p>\n<p>Если попытаться реализовать подобное на JS, пришлось бы отслеживать ресайз окна, получать вычисленное значение, и при превышении заданного порога, фиксировать значение на определённом уровне. При использовании <code>min()</code> и <code>max()</code> браузер всё делает сам: отслеживает изменение значений и, при необходимости, фиксирует их — нам нужно просто выбрать функцию и задать диапазон значений.</p>\n<p>Это будет работать во всех свойствах, которые используют размеры, в том числе в тенях, градиентах и прочем. Пример с <code>box-shadow</code>:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> 0 0 <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>45px<span class=\"token punctuation\">,</span> 15vw<span class=\"token punctuation\">)</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> .5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></figure>\n<div class=\"resizable resizable--x\"><iframe height=\"280\"\n      style=\"width: 100%\"\n      title=\"CSS max() in box-shadow\"\n      src=\"https://codepen.io/yoksel/embed/abNGgjx?&default-tab=result\"\n    ></iframe></div>\n\n<p>Размер тени будет зависеть от размера окна браузера, минимальное значение — <code>45px</code>.</p>\n<p>Экспериментируя с функциями <code>min()</code> и <code>max()</code> можно заметить, что они дают возможность управлять или минимальным значением, или максимальным, но нельзя контролировать и то, и другое одновременно. Хотя совершенно логичным выглядит желание, например, задать размер шрифта, который будет расти в диапазоне от минимального значения до максимального и не выходить за эти значения.</p>\n<p>Для такого есть ещё одна функция:</p>\n<h2 id=clamp><a href=\"#clamp\">clamp()</a></h2>\n\n<p>Она сочетает в себе <code>min()</code> и <code>max()</code>. Функция получает на вход параметры:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token function\">clamp</span><span class=\"token punctuation\">(</span>MIN<span class=\"token punctuation\">,</span> VAL<span class=\"token punctuation\">,</span> MAX<span class=\"token punctuation\">)</span>\n</code></pre></figure>\n<p>И вычисляет значение вот таким образом:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>MIN<span class=\"token punctuation\">,</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>VAL<span class=\"token punctuation\">,</span> MAX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre></figure>\n<p>Проще всего её понимать представляя среднее значение (<code>VAL</code>) как желаемое, которое ограничено минимальным и максимальным значениями. Например, этот код</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> <span class=\"token function\">clamp</span><span class=\"token punctuation\">(</span>20px<span class=\"token punctuation\">,</span> 5vw<span class=\"token punctuation\">,</span> 40px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></figure>\n<p>описывает следующее поведение: размер шрифта равен <code>5vw</code>, но не меньше <code>20px</code> и не больше <code>40px</code>. Порастягивайте демо, чтобы увидеть как это работает:</p>\n<div class=\"resizable resizable--x\"><iframe height=\"300\"\n      style=\"width: 100%\"\n      title=\"CSS clamp() in font-size\"\n      src=\"https://codepen.io/yoksel/embed/gOrzVgX?&default-tab=result\"\n    ></iframe></div>\n\n<p>Аналогичный подход часто используется при разработке адаптивных сайтов: мы задаём минимальное и максимальное значения ширины страницы, позволяя ей тянуться и сжиматься в заданных пределах, например, в диапазоне от <code>320px</code> до <code>1200px</code>:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 320px<span class=\"token punctuation\">;</span>\n<span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 1200px<span class=\"token punctuation\">;</span>\n</code></pre></figure>\n<p>Используя <code>clamp()</code> это можно записать в одну строчку:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token function\">clamp</span><span class=\"token punctuation\">(</span>320px<span class=\"token punctuation\">,</span> 100%<span class=\"token punctuation\">,</span> 1200px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></figure>\n<p>Для следующего демо я взяла значения поменьше, но смысл тот же: блоки тянутся в пределах от <code>200px</code> до <code>400px</code>. Ширина верхнего блока управляется с помощью <code>min-width</code> и <code>max-width</code>, нижнего — с помощью <code>clamp()</code>:</p>\n<div class=\"resizable resizable--x\"><iframe height=\"380\"\n      style=\"width: 100%\"\n      title=\"Min &amp;amp; max-width vs CSS clamp()\"\n      src=\"https://codepen.io/yoksel/embed/wvGjVpx?&default-tab=result\"\n    ></iframe></div>\n\n<p>Оба блока ведут себя совершенно одинаково, разница только в возможностях этих подходов: <code>clamp()</code> позволяет добавить умную динамику значений в любое свойство, не только в размеры блоков. Мне нравится идея использовать <code>clamp()</code> для адаптивных шрифтов, почитать про это можно в статье <a href=\"https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport\">Linearly Scale font-size with CSS clamp() Based on the Viewport</a>.</p>\n<p>Предыдущие функции достаточно просты по сравнению с <code>calc()</code>, самой мощной и интересной.</p>\n<h2 id=calc><a href=\"#calc\">calc()</a></h2>\n\n<p>Функция позволяет производить математические операции:</p>\n<ul>\n<li>сложение</li>\n<li>вычитание</li>\n<li>умножение</li>\n<li>деление</li>\n</ul>\n<p>В отличие от препроцессорных вычислений, <code>calc()</code> позволяет сочетать любые совместимые значения. Например, можно вычесть пиксели из процентов:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>100% - 20px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></figure>\n<p>Препроцессоры так не умеют, потому что на момент компиляции CSS неизвестно чему равны <code>100%</code>, но у браузера эти данные есть, следовательно, он может взять <code>100%</code>, перевести их в пиксели и вычесть из них <code>20px</code>. Кроме того, браузер пересчитает значение, если ширина элемента изменится.</p>\n<p>Внутри <code>calc()</code> можно использовать кастомные свойства, и это делает вычисления в CSS гораздо мощнее препроцессорных. Например, на <code>calc()</code> и кастомных свойствах можно без каких-либо скриптов сделать простой генератор цветовых схем:</p>\n<iframe height=\"450\"\n      style=\"width: 100%\"\n      title=\"Simple color schemes with custom properties\"\n      src=\"https://codepen.io/yoksel/embed/gOrQxrV?&default-tab=result\"\n    ></iframe>\n\n<p>По клику на цвет в CSS меняется значение CSS-переменной, и вся палитра пересчитывается.</p>\n<p>Рассчёт оттенка (<code>hue</code> из HSL) делается таким образом:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">--palette-hue-2</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--palette-hue<span class=\"token punctuation\">)</span> + <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--palette-step-1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></figure>\n<p>И затем оттенок используется для формирования цвета в формате HSL:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token function\">hsl</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--palette-hue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--base-sat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--base-lght<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></figure>\n<p>Конечно, подобные вещи удобнее и логичнее делать на JS, демо просто показывает, что CSS достаточно мощный, чтобы уметь такое.</p>\n<h3 id=examples><a href=\"#examples\">Примеры использования</a></h3>\n\n<h4>Cохранение логики рассчётов</h4>\n\n<p>Например, если нужна ширина в 1/12 от общей, можно высчитать значение и записать его в стили:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.block</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 8.33%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></figure>\n<p>Но так непонятно что это за число. Станет немного понятнее, если логику рассчёта положить рядом в комментарии:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.block</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 8.33%<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 100% / 12 */</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></figure>\n<p>А если использовать <code>calc()</code>, можно само математическое выражение сделать значением:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.block</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>100% / 12<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></figure>\n<p>Так сразу понятно, что элемент занимает 1/12 ширины родителя, и не нужно поддерживать комментарии в актуальном состоянии.</p>\n<h4>Управление размерами элементов</h4>\n\n<p>Например, есть карточка с картинкой, картинка ужимается под ширину колонки с текстом:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.card</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 300px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 400px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 1rem<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.card__img</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></figure>\n<iframe height=\"570\"\n      style=\"width: 100%\"\n      title=\"Simple card with image\"\n      src=\"https://codepen.io/yoksel/embed/zYqyjmR?&default-tab=result\"\n    ></iframe>\n\n<p>Как растянуть картинку на ширину карточки не привязываясь к размерам карточки? С помощью <code>calc()</code>:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.card</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 300px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 400px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 1rem<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.card__img</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Ширина картинки */</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>100% + 2rem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* Сдвиг влево на размер паддинга */</span>\n  <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> -1rem<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></figure>\n<iframe height=\"570\"\n      style=\"width: 100%\"\n      title=\"Simple card with full-width image\"\n      src=\"https://codepen.io/yoksel/embed/gOrZzJb?&default-tab=result\"\n    ></iframe>\n\n<p>Можно ещё немного улучшить код, используя кастомные свойства:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.card</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--padding</span><span class=\"token punctuation\">:</span> 1rem<span class=\"token punctuation\">;</span>\n\n  <span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 300px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 400px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--padding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.card__img</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>100% + <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--padding<span class=\"token punctuation\">)</span> * 2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--padding<span class=\"token punctuation\">)</span> * -1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></figure>\n<p>Так сохранится логика рассчётов, <code>1rem</code> становится не магическим числом, а именованной переменной, и по самому коду будет понятно, что ширина картинки увеличивается на два паддинга, а потом сдвигается влево на один. Можно примерно понять что делает этот код даже не глядя на страницу в браузере.</p>\n<p>Ещё это будет полезно для инпутов. Допустим, нужно, чтобы инпут тянулся на всю ширину родителя, оставляя 40 пикселей справа. Вариант с фиксированной шириной не подходит для адаптивного дизайна. Если просто задать ширину 100% и марджин, блок растянется на всю ширину и сжиматься не будет. С этой задачей прекрасно справится <code>calc()</code>:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.input</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>100% - 40px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></figure>\n<iframe height=\"350\"\n      style=\"width: 100%\"\n      title=\"oNxVzze\"\n      src=\"https://codepen.io/yoksel/embed/oNxVzze?&default-tab=result\"\n    ></iframe>\n\n<p>Текстовое поле всегда будет отодвинуто от края на 40px (+ паддинг) независимо от размера родительского элемента.</p>\n<h4>Адаптивная типографика</h4>\n\n<p>С помощью <code>calc()</code> можно примешивать единицы вьюпорта к обычному размеру шрифта, тогда при увеличении размеров экрана будет расти и шрифт:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">BODY</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>1rem + .5vw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>1.2rem + .5vw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></figure>\n<p>Порастягивайте демо, чтобы увидеть как размер окна влияет на размер шрифта:</p>\n<div class=\"resizable resizable--x\"><iframe height=\"400\"\n      style=\"width: 100%\"\n      title=\"Simple card with adaptive font-size\"\n      src=\"https://codepen.io/yoksel/embed/abNPQQB?&default-tab=result\"\n    ></iframe></div>\n\n<p>Почитать об этом больше можно <a href=\"https://css-tricks.com/fun-viewport-units/\">тут</a> или <a href=\"https://css-tricks.com/snippets/css/fluid-typography/\">тут</a>.</p>\n<p>Мне больше нравится вариант с <code>clamp()</code>, который не только позволяет шрифту расти, но и задаёт ему верхнюю и нижнюю границы.</p>\n<h4>Управление размерами фона</h4>\n\n<p>С помощью <code>calc()</code> можно задать размер фоновому изображению, комбинируя фиксированные единицы и проценты. Например, чтобы фон всегда отступал от краёв на определённое значение:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">DIV</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--offset</span><span class=\"token punctuation\">:</span> 1rem<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--bg-size</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>100% - <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--offset<span class=\"token punctuation\">)</span> * 2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* Цветной градиент */</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token function\">linear-gradient</span><span class=\"token punctuation\">(</span>45deg<span class=\"token punctuation\">,</span> crimson<span class=\"token punctuation\">,</span> 20%<span class=\"token punctuation\">,</span> gold<span class=\"token punctuation\">,</span> 80%<span class=\"token punctuation\">,</span> turquoise<span class=\"token punctuation\">)</span> no-repeat<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* Размер фона */</span>\n  <span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--bg-size<span class=\"token punctuation\">)</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--bg-size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* Отступ от края элемента */</span>\n  <span class=\"token property\">background-position</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--offset<span class=\"token punctuation\">)</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></figure>\n<iframe height=\"350\"\n      style=\"width: 100%\"\n      title=\"Gradient size with calc()\"\n      src=\"https://codepen.io/yoksel/embed/abNPKBP?&default-tab=result\"\n    ></iframe>\n\n<p>Полосатые поля показывают прозрачные области вокруг разноцветного градиента.</p>\n<p>Используя этот же подход можно делать вырезанные углы квадратной формы:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">DIV</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--offset</span><span class=\"token punctuation\">:</span> 1rem<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--bg-size</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>100% - <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--offset<span class=\"token punctuation\">)</span> * 2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* Однотонный фон из двух градиентов */</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">linear-gradient</span><span class=\"token punctuation\">(</span>turquoise<span class=\"token punctuation\">,</span> turquoise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">linear-gradient</span><span class=\"token punctuation\">(</span>turquoise<span class=\"token punctuation\">,</span> turquoise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-repeat</span><span class=\"token punctuation\">:</span> no-repeat<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* Один фон сжат по вертикали, другой по горизонтали */</span>\n  <span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span>\n    100% <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--bg-size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--bg-size<span class=\"token punctuation\">)</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* Один фон сдвинут по вертикали, другой по горизонтали */</span>\n  <span class=\"token property\">background-position</span><span class=\"token punctuation\">:</span>\n    0 <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--offset<span class=\"token punctuation\">)</span> 0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></figure>\n<iframe height=\"350\"\n      style=\"width: 100%\"\n      title=\"MWyZqee\"\n      src=\"https://codepen.io/yoksel/embed/MWyZqee?&default-tab=result\"\n    ></iframe>\n\n<p>В отличие от <a href=\"https://codepen.io/yoksel/pen/abOaKYv\">версии с коническими градиентами</a>, этот вариант будет работать во всех браузерах. Способ был <a href=\"https://twitter.com/SelenIT2/status/1242013922946883585\">предложен</a> Ильёй Стрельциным.</p>\n<p>Также можно рисовать линейными градиентами полосы заданной ширины:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">DIV</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--line-witdh</span><span class=\"token punctuation\">:</span> 3rem<span class=\"token punctuation\">;</span>\n\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">linear-gradient</span><span class=\"token punctuation\">(</span>\n      to left top<span class=\"token punctuation\">,</span>\n      transparent <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>50% - <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--line-witdh<span class=\"token punctuation\">)</span> / 2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      turquoise 0<span class=\"token punctuation\">,</span> turquoise <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>50% + <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--line-witdh<span class=\"token punctuation\">)</span> / 2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      transparent 0\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></figure>\n<iframe height=\"350\"\n      style=\"width: 100%\"\n      title=\"Linear gradient with calc()\"\n      src=\"https://codepen.io/yoksel/embed/rNeRyYL?&default-tab=result\"\n    ></iframe>\n\n<h4>Вычисление цветов и шагов градиента</h4>\n\n<p>Иногда для экспериментов нужен полосатый градиент. Чтобы не считать параметры руками, их можно вычислять с помощью <code>calc()</code> на основе кастомных свойств. Вот так задаются параметры:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">--steps</span><span class=\"token punctuation\">:</span> 9<span class=\"token punctuation\">;</span>\n<span class=\"token property\">--hue-step</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>360deg / <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--steps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token property\">--line-width</span><span class=\"token punctuation\">:</span> 1rem<span class=\"token punctuation\">;</span>\n</code></pre></figure>\n<p>А вот так потом высчитывается оттенок:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token function\">hsl</span><span class=\"token punctuation\">(</span><span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--hue-step<span class=\"token punctuation\">)</span> * 2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> 100%<span class=\"token punctuation\">,</span> 63%<span class=\"token punctuation\">)</span>\n</code></pre></figure>\n<p>И точка остановки:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--line-width<span class=\"token punctuation\">)</span> * 7<span class=\"token punctuation\">)</span>\n</code></pre></figure>\n<p>Редактируя переменные можно менять параметры градиента без необходимости пересчитывать вручную шаги или переписывать весь градиент.</p>\n<p>Правда, при таком автоматическим вычислении оттенков могут получаться не очень красивые цвета, но для экспериментов вполне пойдёт.</p>\n<iframe height=\"350\"\n      style=\"width: 100%\"\n      title=\"MWyZPYr\"\n      src=\"https://codepen.io/yoksel/embed/MWyZPYr?&default-tab=result\"\n    ></iframe>\n\n<p>Область применения <code>cacl()</code> гораздо шире перечисленных примеров. В некоторых случаях, если значения не должны меняться динамически, с подобными задачами справятся и препроцессоры, но если должны, например, при изменении кастомных свойств или размера окна, — без <code>calc()</code> не обойтись.</p>\n<h3 id=nuances><a href=\"#nuances\">Нюансы</a></h3>\n\n<p>При использовании <code>calc()</code> нужно помнить о некоторых тонкостях:</p>\n<ul>\n<li><p>арифметический знак всегда нужно окружать пробелами, чтобы браузер мог правильно разобрать выражение. Например, <code>width: calc(100% -50px)</code> не будет работать, правильно так: <code>width: calc(100% - 50px)</code>. Для умножения и деления это требование не является обязательным, но лучше всегда добавлять пробелы, чтобы сохранить код единообразным и легко читаемым;</p>\n</li>\n<li><p>делить на ноль нельзя, в результате будет ошибка;</p>\n</li>\n<li><p><code>calc()</code> умеет производить рассчёты только для совместимых единиц. Например, можно сложить пиксели с процентами или единицами вьюпорта, градусы с радианами и вычесть миллисекунды из секунд, но вот сложить секунды с пикселями или градусы с единицами вьюпорта ожидаемо не получится, потому что непонятно в каких единицах ожидается результат.</p>\n<p>У меня была слегка безумная идея привязать градусы градиента к ширине вьюпорта (и вращать градиент растягивая окно браузера), но я не придумала как это можно реализовать, и не уверена, что это в принципе возможно без JS;</p>\n</li>\n<li><p>рассчёты в медиавыражениях поддерживаются только для одинаковых единиц: пиксели можно складывать с пикселями, ремы с ремами. Складывать пиксели с ремами внутри медиавыражения нельзя. Кастомные свойства внутри медиавыражений не работают вообще, и никакие вычисления с ними, соответственно, невозможны (<a href=\"https://codepen.io/yoksel/full/bGpQXdb\">демо с calc() в @media</a>). Для каких-то сложных конструкций можно попробовать воспользоваться <a href=\"https://css-tricks.com/logic-in-media-queries/\">логическими операциями</a>.</p>\n</li>\n</ul>\n<h3 id=restrictions><a href=\"#restrictions\">Светлое будущее?</a></h3>\n\n<p>В <a href=\"https://www.w3.org/TR/css-values-4/#calc-notation\">спецификации</a> есть интересный момент: утверждается, что внутри <code>calc()</code> в качестве значений можно использовать содержимое атрибутов, да и в принципе можно использовать атрибуты как <a href=\"https://www.w3.org/TR/css-values-4/#attr-notation\">значения CSS-свойств</a>.</p>\n<p>От обычного использования <code>attr()</code> в качестве <a href=\"/content\">содержимого псевдоэелемента</a> это отличается указанием типа содержимого:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token comment\">/* HTML\n&lt;div data-color=\"#FC9\">...&lt;/div>\n*/</span>\n\n<span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token function\">attr</span><span class=\"token punctuation\">(</span>data-color color<span class=\"token punctuation\">,</span> orange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></figure>\n<p>Или единиц измерения:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token comment\">/* HTML\n&lt;div data-length=\"300\">...&lt;/div>\n*/</span>\n\n<span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token function\">attr</span><span class=\"token punctuation\">(</span>data-length px<span class=\"token punctuation\">,</span> 200px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></figure>\n<p>Значение после запятой — запасное, на случай, если не удастся получить или распарсить значение атрибута.</p>\n<p>Поначалу эта конструкция показалась мне странной: зачем класть данные в атрибуты, а потом ещё и типизировать их в CSS, если можно сразу положить нужное в кастомные свойства?</p>\n<p>Например:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token comment\">/* HTML\n&lt;div style=\"--width: 100px\">&lt;/div>\n*/</span>\n\n<span class=\"token selector\">DIV</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> gold<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></figure>\n<p>Но <a href=\"https://twitter.com/yoksel/status/1304025539120902145\">в твиттере</a> мне быстро накидали примеров, когда это было бы действительно удобно. Например, получая размеры из атрибутов было бы удобно делать адаптивные картинки и фреймы. У меня получилось сделать <a href=\"/adaptive-video-with-css-math\">адаптивное видео</a>, используя кастомные свойства, но для этого приходится дублировать размеры в инлайновых стилях. Если бы можно было считывать значения из атрибутов, без дублирования можно было бы обойтись.</p>\n<p>На момент написания статьи это не поддерживается <a href=\"https://caniuse.com/mdn-css_types_attr_type-or-unit\">ни одним браузером</a>, но есть некоторая надежда, что однажды это заработает, потому что подобное использование атрибутов описано в спецификации свойства, которое помогло бы управлять соотношением сторон: <a href=\"https://drafts.csswg.org/css-sizing-4/#ratios\">aspect-ratio</a>. Там есть такой пример:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token comment\">/* HTML\n&lt;iframe\n  src=\"https://www.youtube.com/embed/0Gr1XSyxZy0\"\n  width=560\n  height=315>\n*/</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@supports</span> <span class=\"token punctuation\">(</span><span class=\"token property\">aspect-ratio</span><span class=\"token punctuation\">:</span> <span class=\"token function\">attr</span><span class=\"token punctuation\">(</span>width number<span class=\"token punctuation\">)</span> / 1<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">iframe</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">aspect-ratio</span><span class=\"token punctuation\">:</span> <span class=\"token function\">attr</span><span class=\"token punctuation\">(</span>width number<span class=\"token punctuation\">)</span> / <span class=\"token function\">attr</span><span class=\"token punctuation\">(</span>height number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></figure>\n<p>И вот это было бы очень круто, потому что избавило бы разработчиков от необходимости городить <a href=\"https://css-tricks.com/fluid-width-video/\">странные конструкции</a> для решения той же задачи. Почитать про <code>aspect-ratio</code> можно в статье Рэйчел Эндрю <a href=\"https://www.smashingmagazine.com/2019/03/aspect-ratio-unit-css/\">Designing An Aspect Ratio Unit For CSS</a>.</p>\n<p>Также не так давно в <a href=\"https://drafts.csswg.org/css-values-4/#round-func\">черновики</a> <a href=\"https://css-live.ru/vecssti-s-polej/novye-matematicheskie-funkcii-v-module-edinic-i-znachenij-css-4-urovnya-eshhe-odin-shag-k-polnocennomu-programmirovaniyu-na-css.html\">были добавлены</a> другие математические функции, например, <code>mod()</code>, <code>round()</code>, <code>sin()</code> и многие другие. Это совсем свежее добавление, новые функции ещё нигде не поддерживаются.</p>\n<h2 id=support><a href=\"#support\">Поддержка браузерами</a></h2>\n\n<p><code>min()</code>, <code>max()</code>, <code>clamp()</code> и <code>calc()</code> поддерживаются в <a href=\"https://caniuse.com/css-math-functions\">большинстве современных браузеров</a>, их поддержка примерно совпадает с <a href=\"https://caniuse.com/css-variables\">кастомными свойствами</a>. И то, и другое не работает в IE11.</p>\n<p>При необходимости проверить поддержку функций и кастомных свойств можно воспользоваться <code>@supports</code> (также учитывая <a href=\"https://caniuse.com/css-featurequeries\">поддержку браузерами</a> для него):</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@supports</span> <span class=\"token punctuation\">(</span><span class=\"token property\">--color</span><span class=\"token punctuation\">:</span> pink<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  ...\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@supports</span> <span class=\"token punctuation\">(</span><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>10px<span class=\"token punctuation\">,</span> 20px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  ...\n<span class=\"token punctuation\">}</span>\n</code></pre></figure>\n","links":[{"href":"https://www.w3.org/TR/css-values-4/#calc-notation","text":"Mathematical Expressions: calc(), min(), max() and clamp()"},{"href":"http://lesscss.org/functions/#math-functions","text":"Less: Math Functions"},{"href":"http://lesscss.org/#escaping","text":"Less: Escaping"},{"href":"https://sass-lang.com/documentation/modules/math","text":"Sass:math"},{"href":"https://sass-lang.com/documentation/syntax/special-functions","text":"Special Functions"},{"href":"https://developer.mozilla.org/en-US/docs/Web/CSS/calc","text":"calc()"},{"href":"https://www.smashingmagazine.com/2015/12/getting-started-css-calc-techniques/","text":"Getting Started With CSS calc ()"},{"href":"https://css-live.ru/articles/kogda-byvaet-nuzhen-calc.html","text":"Когда бывает нужен calc()"},{"href":"https://css-tricks.com/keep-math-in-the-css/","text":"Keep Math in the CSS"},{"href":"https://css-tricks.com/when-sass-and-new-css-features-collide/","text":"When Sass and New CSS Features Collide"},{"href":"https://medium.com/buildit/hardcore-css-calc-bdfb0162993c","text":"Hardcore CSS calc()"},{"href":"https://css-tricks.com/a-complete-guide-to-calc-in-css/","text":"A Complete Guide to calc() in CSS"},{"href":"https://heydonworks.com/article/the-flexbox-holy-albatross-reincarnated/","text":"The Flexbox Holy Albatross Reincarnated"},{"href":"https://www.madebymike.com.au/writing/fluid-type-calc-examples/","text":"Fluid typography examples"},{"href":"https://css-tricks.com/snippets/css/fluid-typography/","text":"Fluid Typography"},{"href":"https://css-tricks.com/fun-viewport-units/","text":"Fun with Viewport Units"},{"href":"https://css-tricks.com/logic-in-media-queries/","text":"Logic in Media Queries"},{"href":"https://drafts.csswg.org/css-sizing-4/#ratios","text":"aspect-ratio"},{"href":"https://www.smashingmagazine.com/2019/03/aspect-ratio-unit-css/","text":"Designing An Aspect Ratio Unit For CSS"},{"href":"https://css-tricks.com/fluid-width-video/","text":"Fluid Width Video"},{"href":"https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport","text":"Linearly Scale font-size with CSS clamp() Based on the Viewport]()"},{"href":"https://www.w3.org/TR/css-values-3/#attr-notation","text":"Attribute References: attr()"},{"href":"https://developer.mozilla.org/en-US/docs/Web/CSS/attr","text":"attr()"},{"href":"https://css-live.ru/vecssti-s-polej/novye-matematicheskie-funkcii-v-module-edinic-i-znachenij-css-4-urovnya-eshhe-odin-shag-k-polnocennomu-programmirovaniyu-na-css.html","text":"Новые математические функции в модуле единиц и значений CSS 4 уровня – еще один шаг к полноценному программированию на CSS"},{"href":"https://developer.mozilla.org/en-US/docs/Web/CSS/@supports","text":"@supports"},{"href":"/size-units/#relative-units","text":"Единицы размеров в CSS"},{"href":"/adaptive-video-with-css-math","text":"Адаптивное видео с помощью встроенных математических функций CSS"}],"tags":["css-math"],"navItems":[{"id":"min-max","text":"min(), max()","level":0},{"id":"clamp","text":"clamp()","level":0},{"id":"calc","text":"calc()","level":0},{"id":"examples","text":"Примеры использования","level":1},{"id":"nuances","text":"Нюансы","level":1},{"id":"restrictions","text":"Светлое будущее?","level":1},{"id":"support","text":"Поддержка браузерами","level":0}],"date":"2020-09-26"},"posts":[{"date":"2020-09-26","href":"/css-math","text":"Математические функции в CSS","type":"post"},{"date":"2020-09-24","href":"/adaptive-video-with-css-math","text":"Адаптивное видео с помощью встроенных математических функций CSS","type":"post"},{"date":"2020-08-30","href":"/inaccessibility","text":"Недоступность в картинках","type":"post"},{"date":"2020-08-13","href":"/size-units","text":"Единицы размеров в CSS","type":"post"},{"date":"2020-07-27","href":"/color-themes-generator","text":"Генератор цветовых тем","type":"post"},{"date":"2020-07-25","href":"/jekyll-gatsby","text":"Jekyll → Gatsby","type":"post"},{"date":"2018-06-18","href":"/opentype-variable-fonts","text":"Вариативные шрифты","type":"post"},{"date":"2017-08-15","href":"/svg-sizes","text":"Размеры в SVG","type":"post"},{"date":"2017-01-13","href":"/adaptive-pixel-perfect","text":"Адаптивный Pixel Perfect","type":"post"},{"date":"2016-12-20","href":"/a11y-for-logotypes","text":"Логотип не отвечает или временно недоступен","type":"post"},{"date":"2016-11-23","href":"/svg-patterns","text":"SVG-паттерны","type":"post"},{"date":"2016-08-18","href":"/svg-bubble","text":"Мыльные пузыри на SVG","type":"post"},{"date":"2016-08-11","href":"/svg-gradients","text":"SVG-градиенты","type":"post"},{"date":"2016-02-12","href":"/funny-little-console","text":"Весёлая консолька","type":"post"},{"date":"2016-02-04","href":"/svg-masks","text":"SVG-маски","type":"post"},{"date":"2015-07-06","href":"/scroll-snap","text":"Умная прокрутка со Scroll Snap Points","type":"post"},{"date":"2014-08-11","href":"/css-animation-algorithms","text":"CSS-анимации для ротации изображений","type":"post"},{"date":"2014-08-10","href":"/animated-svg-mask","text":"Анимированные SVG-маски","type":"post"},{"date":"2014-07-26","href":"/svg-stroke","text":"Странности обводки в SVG","type":"post"},{"date":"2014-07-08","href":"/svg-preloaders","text":"SVG-прелоадеры","type":"post"},{"date":"2014-07-04","href":"/animated-gradients-2","text":"Анимируем градиенты ещё раз","type":"post"},{"date":"2014-06-15","href":"/background-blend-mode","text":"Background-blend-mode","type":"post"},{"date":"2014-04-17","href":"/svg-decoration","text":"Возможности оформления SVG","type":"post"},{"date":"2014-04-12","href":"/css-and-svg-masks","text":"CSS и SVG маски","type":"post"},{"date":"2014-04-06","href":"/nth-child","text":"Nth-child и nth-of-type","type":"post"},{"date":"2014-03-29","href":"/svg-icons","text":"SVG-иконки","type":"post"},{"date":"2014-03-27","href":"/svg-fill-and-stroke","text":"SVG: заливка и обводка","type":"post"},{"date":"2014-03-23","href":"/svg-path","text":"SVG-path","type":"post"},{"date":"2014-03-22","href":"/svg-groups-use","text":"SVG: группировка и переиспользование элементов","type":"post"},{"date":"2014-03-21","href":"/svg-shapes","text":"SVG-фигуры и трансформации","type":"post"},{"date":"2014-03-19","href":"/svg","text":"SVG","type":"post"},{"date":"2014-03-04","href":"/3d-and-gradients","text":"СSS-градиенты и 3D","type":"post"},{"date":"2014-02-23","href":"/shadowpainter","text":"Рисовалка анимированных теней","type":"post"},{"date":"2014-02-12","href":"/new-patterns","text":"Свежие CSS-паттерны","type":"post"},{"date":"2014-02-07","href":"/css-patterns","text":"CSS-паттерны","type":"post"},{"date":"2014-02-05","href":"/radial-gradients","text":"Радиальные градиенты","type":"post"},{"date":"2014-02-04","href":"/linear-gradients","text":"Линейные градиенты","type":"post"},{"date":"2014-01-25","href":"/tic-tac-toe","text":"Крестики-нолики на CSS","type":"post"},{"date":"2014-01-22","href":"/border-image","text":"Border-image","type":"post"},{"date":"2014-01-19","href":"/digital-watch","text":"Электронные часы на CSS и JS.","type":"post"},{"date":"2014-01-03","href":"/specifity","text":"Сколько весят селекторы?","type":"post"},{"date":"2014-01-02","href":"/unicode","text":"Символы юникода","type":"post"},{"date":"2013-12-22","href":"/content","text":"Свойство content","type":"post"},{"date":"2013-12-16","href":"/animation-for-gradients","text":"Анимируем CSS-градиенты","type":"post"},{"date":"2013-12-09","href":"/text-effects","text":"Текстовые эффекты","type":"post"},{"date":"2013-11-27","href":"/list-like-tree","text":"Древовидный список на CSS","type":"post"},{"date":"2013-11-20","href":"/css-selectors-part2","text":"Css-селекторы, часть 2","type":"post"},{"date":"2013-11-16","href":"/css-selectors","text":"Css-селекторы","type":"post"},{"date":"2013-10-22","href":"/kontekst-nalozheniya","text":"Контекст наложения","type":"post"},{"date":"2013-10-09","href":"/box-sizing","text":"Box-sizing","type":"post"},{"date":"2013-10-09","href":"/dva-sposoba-proshit-e-lement-po-krayu","text":"Два способа \"прошить\" элемент по краю","type":"post"},{"date":"2013-10-06","href":"/tsveta","text":"Цвета в CSS","type":"post"},{"date":"2013-10-04","href":"/fon-pod-strochkami-dobavlyaem-polya","text":"Фон под строчками: добавляем поля","type":"post"},{"date":"2013-09-29","href":"/box-shadow","text":"Box-shadow","type":"post"},{"date":"2013-09-27","href":"/css-figury-lepestok","text":"Css-фигуры: лепесток","type":"post"},{"date":"2013-09-26","href":"/3d-cube","text":"3D-куб","type":"post"},{"date":"2013-09-26","href":"/css-animation","text":"Css Animation","type":"post"},{"date":"2013-09-26","href":"/transform","text":"Transform","type":"post"},{"date":"2013-09-17","href":"/border-radius","text":"Border-radius","type":"post"},{"date":"2013-09-10","href":"/first-letter","text":"First letter","type":"post"},{"date":"2013-09-06","href":"/css-figury","text":"CSS-фигуры","type":"post"},{"date":"2013-09-06","href":"/eti-glaza-naprotiv","text":"Эти глаза напротив","type":"post"},{"date":"2013-09-04","href":"/strelki-s-pomoshh-yu-svojstva-border","text":"Стрелки с помощью свойства border","type":"post"},{"date":"2013-09-03","href":"/flexbox","text":"Flexbox","type":"post"}],"pages":[{"date":"2014-03-19","type":"page","href":"/pages/svg-links","text":"SVG: полезные ссылки"},{"date":"2013-11-16","type":"page","href":"/pages/css-selectors","text":"CSS-селекторы одной таблицей"},{"date":"2013-10-06","type":"page","href":"/pages/tablitsa-imenovanny-h-tsvetov","text":"Таблица именованных цветов"},{"date":"2013-09-27","type":"page","href":"/pages/transform-functions","text":"Функции Transform"},{"date":"2013-09-26","type":"page","href":"/pages/svojstva-animation","text":"Свойства Animation одной таблицей"},{"date":"2013-09-26","type":"page","href":"/pages/svojstva-transform","text":"Свойства Transform"},{"date":"2013-09-04","type":"page","href":"/pages/razny-j-sintaksis-flexbox","text":"Разный синтаксис Flexbox"},{"date":"2013-09-03","type":"page","href":"/pages/svojstva-flexbox","text":"Свойства Flexbox одной таблицей"}],"prevNext":{"prev":{"date":"2020-09-24","href":"/adaptive-video-with-css-math","text":"Адаптивное видео с помощью встроенных математических функций CSS","type":"post","id":"previous"}}},"__N_SSG":true}