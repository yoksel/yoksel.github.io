{"pageProps":{"article":{"title":"Единицы размеров в CSS","slug":"size-units","content":"<p>В CSS существует множество единиц измерения. Обычно мы используем единицы размеров, но также есть единицы для углов — например, <code>deg</code> и <code>turn</code>, единицы времени — <code>s</code> и <code>ms</code>, единицы плотности экрана — например, <code>dpi</code> и <code>dppx</code> и другие.</p>\n<p>Здесь будут рассматриваться только единицы размеров, которыми мы пользуемся чаще всего. Подробное описание можно найти в спецификации W3C <a href=\"https://www.w3.org/TR/css-values-4/#lengths\">Distance Units: the &lt;length&gt; type</a>.</p>\n<p>Общим для всех единиц длины будет то, что для значения <code>0</code>, единицы можно не указывать: <code>height: 0px</code> и <code>height: 0</code> будут работать одинаково, так что единицы измерения можно отбросить. Это позволяет немного быстрее писать код и считывать значения свойств.</p>\n<h2 id=absolute-units><a href=\"#absolute-units\">Абсолютные единицы измерения</a></h2>\n\n<p><a href=\"https://www.w3.org/TR/css-values-4/#absolute-lengths\">Спецификация</a></p>\n<table>\n<tr>\n  <td><code>cm</code></td>\n  <td>сантиметр</td>\n  <td>1cm = 96px/2.54 ≈ 37,795px</td>\n</tr>\n<tr>\n  <td><code>mm</code></td>\n  <td>миллиметр</td>\n  <td>1mm = 1/10 от 1cm</td>\n</tr>\n<tr>\n  <td><code>q<code/></td>\n  <td>четверь миллиметра</td>\n  <td>1q = 1/40 от 1cm = 0.25mm ≈ 0.945px</td>\n</tr>\n<tr>\n  <td><code>in</code></td>\n  <td>дюйм</td>\n  <td>1in = 2.54cm = 96px</td>\n</tr>\n<tr>\n  <td><code>pc</code></td>\n  <td>пика</td>\n  <td>1pc = 1/6 от 1in</td>\n</tr>\n<tr>\n  <td><code>pt</code></td>\n  <td>пункт, точка</td>\n  <td>1pt = 1/72 от 1in</td>\n</tr>\n<tr>\n  <td><code>px</code></td>\n  <td>пиксель</td>\n  <td>1px = 1/96 от 1in, 0.75 от pt</td>\n</tr>\n</table>\n\n<p>Абсолютные единицы относительны друг для друга (соотношения в последней колонке), но все они привязаны к конкретным величинам.</p>\n<p>Для печатных устройств сантиметры, миллиметры и дюймы должны быть равны своим обычным значениям, но для экранов это будет не так:</p>\n<iframe height=\"400\"\n      style=\"width: 100%\"\n      title=\"Some absolute CSS units\"\n      src=\"https://codepen.io/yoksel/embed/VwaLPRL?&default-tab=result\"\n    ></iframe>\n\n<p>Я попыталась разными способами получить полоску длиной 10 сантиметров. Все полоски равны друг другу, но ни одна не равна 10 сантиметрам, если приложить линейку к экрану. Проверила на двух мониторах: на одном они короче, на другом — длиннее.</p>\n<p>На веб-страницах физические единицы измерения вроде <code>cm</code>, <code>mm</code> и <code>in</code> не будут работать как ожидается, потому что главная экранная единица измерения — пиксель.</p>\n<p>Что такое пиксель и какого он размера? Чем отличаются пиксели <code>px</code> от точек <code>pt</code>? Почему у них такие странные размеры в 1/96 дюйма и 1/72 дюйма соответственно? Как были выбраны эти значения и почему этих единиц измерения две? Попытка разобраться с мелкой точкой на экране вызывает множество вопросов и требует погружения в историю. Я попыталась выяснить как всё было, и вот что узнала.</p>\n<p><img\n  src=\"/assets/img/articles/size-units/mac.jpg\"\n  alt=\"Один из первых макинтошей\"\n  loading=\"lazy\"\n  width=\"250\"\n  class=\"float float--right\"\n/></p>\n<p>Когда появились первые программы для предпечатной подготовки, нужно было как-то соотнести размер элементов на экране с тем, чтоб будет напечатано на бумаге. Тогда оказалось, что один дюйм (inch) на экране соответствует 72 точкам. Это соотношение зафиксировано в <code>pt</code>, <code>pt</code> — это 1/72 дюйма. Изначально это была типографская единица измерения, и её значения <a href=\"https://en.wikipedia.org/wiki/Point_(typography)\">менялись со временем</a>, но с появлением компьютерных программ для полиграфии значение <code>pt</code> пришлось стандартизировать.</p>\n<p>С развитием технологий стало возможно делать экраны с большим разрешением, и Microsoft предложила отображать 96 точек на дюйм, что было зафиксировано в <code>px</code>, то есть пиксель — это 1/96 дюйма. Это позволило увеличить чёткость мелкого текста, потому что для отображения символа теперь можно было использовать больше точек.</p>\n<p>Размер <code>px</code> составляет 0.75 от <code>pt</code>. По сути, <code>pt</code> — это более крупный пиксель.</p>\n<p>Позже появились ретиновые дисплеи с повышенной плотностью пикселей, и тогда CSS-пиксели, которые мы используем, перестали соответствовать физическим пикселям экрана, теперь это виртуальная единица, размер которой определяется устройством вывода. Для нас это не играет особой роли кроме как при работе с изображениями, когда для ретины нужно подготовить дополнительный набор картинок. Все размеры, заданные в пикселях, будут корректно отображены на экране вне зависимости от того, сколько физических пикселей для этого потребуется.</p>\n<p>На сегодняшний момент соотношение физических единиц к точкам экрана утратило прежний смысл, но осталось зафиксированым в спецификации для сохранения обратной совместимости и упрощения конвертации одних единиц в другие.</p>\n<p>При этом важно помнить, что раз CSS-пиксели уже не соответствуют физическим точкам экрана, сантиметры и дюймы при выводе на экран тоже не будут не соответствовать своим реальным размерам, об этом есть и в спецификации:</p>\n<blockquote>\n<p>If the anchor unit is the pixel unit, the physical units might not match their physical measurements. Alternatively if the anchor unit is a physical unit, the pixel unit might not map to a whole number of device pixels.</p>\n</blockquote>\n<p>То есть, если использовать дюймы для вёрстки веб-страниц, один дюйм всегда будет равен 96 пикселям, но никогда — реальной физической единице:</p>\n<iframe height=\"300\"\n      style=\"width: 100%\"\n      title=\"OJNVxrK\"\n      src=\"https://codepen.io/yoksel/embed/OJNVxrK?&default-tab=result\"\n    ></iframe>\n\n<p>Таким образом, главное в абсолютных единицах — контекст использования:</p>\n<ul>\n<li>для вывода <strong>на печать</strong> экранные пиксели должны быть приведены к физическими единицами, следовательно, для подготовки документов к печати лучше использовать их;</li>\n<li>для вывода <strong>на экран</strong> дюймы и сантиметры должны быть приведены к пикселям, следовательно, для веб-разработки лучше сразу использовать пиксели.</li>\n</ul>\n<p>Пока копалась в истории единиц измерения, выяснилось, что во внутреннем коде Gecko когда-то была <a href=\"https://github.com/w3c/csswg-drafts/issues/315#issuecomment-233099861\">поддержка километров</a>,\n<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=482146\">удалили</a> в 2009-м:</p>\n<p><img\n  src=\"/assets/img/articles/size-units/km.png\"\n  alt=\"Bugzilla: remove internal code for unsupported non-CSS units (feet, miles, meters, kilometers, didots, ciceros)\"\n  loading=\"lazy\"\n  width=\"600\"\n/></p>\n<p>Из физических единиц ещё может представлять интерес <code>q</code>: это относительно новая единица, и она поддерживается <a href=\"https://caniuse.com/#feat=mdn-css_types_length_q\">не всеми браузерами</a>. <code>q</code> — это <code>0.25mm</code>. Как и другие физические единицы, больше имеет смысл для печати, но также можно попытаться использовать её для уменьшения размера кода: <code>q</code> — это примерно <code>0.945px</code>, то есть в некоторых случаях вполне можно использовать её вместо пикселей, получается один символ (<code>q</code>) вместо двух (<code>px</code>).</p>\n<p>Пример такого использования я подсмотрела в <a href=\"https://lab.iamvdo.me/the-creation-of-adam/\">этом демо</a>. Открывайте осторожно, может повиснуть браузер. Попытка посмотреть стили в веб-инспекторе вешает его почти гарантированно, поэтому лучше посмотрите исходный код страницы. Скриншот:</p>\n<p><a href=\"https://lab.iamvdo.me/the-creation-of-adam/\"><img\n  src=\"/assets/img/articles/size-units/adam.jpeg\"\n  alt=\"The Creation of Adam (#singlediv) | @iamvdo\"\n  loading=\"lazy\"\n  width=\"700\"\n/></a></p>\n<p>Чистое безумие, конечно. Картина воспроизведена с помощью <code>box-shadow</code>, и мне кажется, тему рисования на CSS на этом можно закрывать.</p>\n<p>Вес стилей демо — 4.5Mb, а если бы там вместо <code>q</code> были пиксели, стили весили бы на 300Kb больше.</p>\n<h2 id=relative-units><a href=\"#relative-units\">Относительные единицы измерения</a></h2>\n\n<p><a href=\"https://www.w3.org/TR/css-values-4/#relative-lengths\">Спецификация</a></p>\n<p>Относительные единицы измерения вычисляются на основе каких-то других величин: размера шрифта или размера экрана, и могут динамически меняться вместе с ними.</p>\n<h3>Единицы измерения, привязанные к шрифту</h3>\n\n<table>\n<tr>\n  <td><code>em</code></td>\n  <td>размер шрифта элемента</td>\n</tr>\n<tr>\n  <td><code>ex</code></td>\n  <td>высота <code>x</code> в нижнем регистре</td>\n</tr>\n<tr>\n  <td><code>ch</code></td>\n  <td>ширина <code>0</code> (ZERO, U+0030)</td>\n</tr>\n<tr>\n  <td><code>rem</code></td>\n  <td>размер шрифта корневого элемента</td>\n</tr>\n</table>\n\n<h4>em</h4>\n\n<p>Для <code>font-size</code> это унаследованный размер шрифта, для остальных свойств — текущий размер шрифта, уже вычисленный для <code>font-size</code>.</p>\n<p>Чтобы увидеть это вживую, возьмем такой код:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">BODY</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Базовый размер шрифта */</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 42px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">DIV</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Наследуем шрифт родителя и уменьшаем в два раза */</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> .5em<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* Какой толщины будет border в каждом случае? */</span>\n<span class=\"token selector\">.box-1</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">border-width</span><span class=\"token punctuation\">:</span> .5em<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.box-2</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">border-width</span><span class=\"token punctuation\">:</span> 1em<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></figure>\n<p>Получилось вот что:</p>\n<iframe height=\"380\"\n      style=\"width: 100%\"\n      title=\"Em for font-size vs em for other props\"\n      src=\"https://codepen.io/yoksel/embed/wvGKpEy?&default-tab=result\"\n    ></iframe>\n\n<p>Розовая полоса — градиент высотой <code>1em</code>, чтобы было с чем сравнивать.</p>\n<p>Оба блока имеют одинаковый размер шрифта, уменьшенный относительно родительского элемента в два раза (<code>font-size: .5em;</code>). И как теперь указать толщину рамки равной размеру шрифта?</p>\n<p><code>border-width: .5em</code> делает рамку в два раза тоньше, чем нужно. Это происходит потому, что родительский размер шрифта использует только <code>font-size</code>, а <code>border</code> получает вычисленное  значение из <code>font-size</code>.</p>\n<p>Таким образом, если где-то не в <code>font-size</code> нужно использовать текущий размер шрифта, не нужно копировать значение размера, достаточно указать <code>1em</code>. У правого блока рамка правильной толщины.</p>\n<p>Ещё одно демо, для понимания как соотносятся <code>em</code> и символы шрифта. Цветные полосы имеют высоту <code>1em</code>, поэтому видно, что <code>1em</code> примерно соответствует высоте символов с учётом заглавных букв и выносных элементов:</p>\n<iframe height=\"450\"\n      style=\"width: 100%\"\n      title=\"vYGNJrg\"\n      src=\"https://codepen.io/yoksel/embed/vYGNJrg?&default-tab=result\"\n    ></iframe>\n\n<p>Размер <code>em</code> нигде не зафиксирован, и вычисляется в момент использования на основе размера шрифта родителя. Например, если задать размер шрифта вот таким образом:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">DIV</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> .75em<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></figure>\n<p>а потом вложить несколько дивов один в другой, размер шрифта каждого следующего дива будет меньше предыдущего:</p>\n<iframe height=\"460\"\n      style=\"width: 100%\"\n      title=\"Nested em\"\n      src=\"https://codepen.io/yoksel/embed/ExKVbBO?&default-tab=result\"\n    ></iframe>\n\n<p>Потому что <code>1em</code> — это текущий унаследованный размер шрифта, а <code>.75em</code> — унаследованный шрифт, уменьшенный на четверть. Для каждого нового вложенного дива сначала наследуется уменьшенный шрифт родителя, а потом тоже уменьшается заданным образом.</p>\n<p>Об этом нужно помнить, если вы захотите задавать в <code>em</code> размеры переиспользуемых компонентов: при вкладывании элементов друг в друга вычисленное значение <code>em</code> может оказаться не тем, что хотелось бы получить.</p>\n<h4>ex</h4>\n\n<p><code>ex</code> — это высота буквы <code>x</code> в нижнем регистре. Если в шрифте нет подходящей метрики, и в нём нет такого символа, браузер попробует вычислить <code>ex</code> самостоятельно. Если это по каким-то причинам невозможно, <code>ex</code> считается равным <code>.5em</code>.</p>\n<p>В демо цветные полосы имеют высоту <code>1ex</code>, и для выбранных шрифтов <code>1ex</code> будет равен высоте маленькой <code>x</code>:</p>\n<iframe height=\"450\"\n      style=\"width: 100%\"\n      title=\"Gradients stripes with 1ex height\"\n      src=\"https://codepen.io/yoksel/embed/poyjVgL?&default-tab=result\"\n    ></iframe>\n\n<p>Посмотрим, как на <code>ex</code> влияет шрифт, и как <code>ex</code> соотносится с <code>em</code>.</p>\n<p>В этом демо квадратикам в левой группе заданы размеры в <code>1em</code>, в правой — в <code>2ex</code>, так можно проверить равен ли <code>ex</code> половине <code>em</code>. Также каждому квадратику задан свой шрифт:</p>\n<iframe height=\"380\"\n      style=\"width: 100%\"\n      title=\"wvGKNJY\"\n      src=\"https://codepen.io/yoksel/embed/wvGKNJY?&default-tab=result\"\n    ></iframe>\n\n<p>В отличие от <code>em</code>, размер <code>ex</code> будет меняться вместе со шрифтом, и во всех случаях <code>2ex</code> не равно <code>1em</code>, то есть на соотношение в <code>.5</code> полагаться нельзя.</p>\n<p><code>ex</code> точно также как и <code>em</code> наследует размер шрифта родителя:</p>\n<iframe height=\"400\"\n      style=\"width: 100%\"\n      title=\"Nested ex\"\n      src=\"https://codepen.io/yoksel/embed/WNwQmXw?&default-tab=result\"\n    ></iframe>\n\n<h4>ch</h4>\n\n<p><code>ch</code> — ширина символа <code>0</code>. Для моноширинных шрифтов это точная ширина любого символа, для остальных — примерная ширина одного узкого символа. Если по каким-то причинам ширину невозможно вычислить, запасным значением будет <code>.5em</code>.</p>\n<p>Эрик Мейер <a href=\"https://meyerweb.com/eric/thoughts/2018/06/28/what-is-the-css-ch-unit/\">предостерегает</a> от попыток использовать <code>ch</code> для задания ширины контейнера в символах, потому что это не работает как ожидается. В демо ниже ширина каждого блока с текстом задана вот таким образом:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">DIV</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 10ch<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></figure>\n<p>Ширина блока будет верной только для моноширинных шрифтов (см. <code>Courier</code>), в некоторых шрифтах будет работать и для цифр (<code>Arial</code>, <code>Comic Sans</code>), в остальных случаях нельзя рассчитывать, что <code>1ch</code> будет равен ширине символа:</p>\n<iframe height=\"450\"\n      style=\"width: 100%\"\n      title=\"Unit ch\"\n      src=\"https://codepen.io/yoksel/embed/RwaWdzw?&default-tab=result\"\n    ></iframe>\n\n<p>Сопоставим <code>1em</code>, <code>2ex</code> и <code>2ch</code>:</p>\n<iframe height=\"420\"\n      style=\"width: 100%\"\n      title=\"1em vs 2ex vs 2ch\"\n      src=\"https://codepen.io/yoksel/embed/vYGNMGO?&default-tab=result\"\n    ></iframe>\n\n<p>Очевидно, что:</p>\n<ul>\n<li><code>1ch</code> больше <code>1ex</code> (ширина <code>0</code> больше высоты <code>x</code>);</li>\n<li><code>1ch</code> не равен половине <code>em</code>;</li>\n<li>значение <code>ch</code> может меняться вместе со шрифтом.</li>\n</ul>\n<h4>rem</h4>\n\n<p><code>rem</code> — это <code>root em</code>, размер шрифта корневого элемента, для веб-страницы это элемент <code>html</code>. Размер шрифта по умолчанию — <code>16px</code>. Это значение не зафиксировано в спецификации, но используется всеми браузерами. Про историю вопроса можно почитать в <a href=\"https://lists.w3.org/Archives/Public/www-style/1998Dec/0030.html\">рассылке W3C</a>.</p>\n<p>Если пользователь в настройках браузера задаст другое значение, оно переопределит размер шрифта корневого элемента. То есть если нужно сделать интерфейс, который будет масштабироваться под размер шрифта, выбранный пользователем, в качестве единицы измерения удобно использовать именно <code>rem</code>.</p>\n<p>Важно понимать, что размер <code>rem</code> можно переопределить только для элемента <code>html</code>. Например, возьмем такие стили:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">BODY</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 24px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">DIV</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 1rem<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></figure>\n<p>Если <code>rem</code> можно было бы переопределять в любом месте, текст бы увеличился, но этого не произошло:</p>\n<iframe height=\"300\"\n      style=\"width: 100%\"\n      title=\"KKzVKvg\"\n      src=\"https://codepen.io/yoksel/embed/KKzVKvg?&default-tab=result\"\n    ></iframe>\n\n<p>Высота цветной полосы <code>24px</code>, чтобы было с чем сравнивать.</p>\n<p>Если переопределить размер шрифта для элемента <code>html</code>, всё сработает:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">HTML</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 24px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">DIV</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 1rem<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></figure>\n<iframe height=\"280\"\n      style=\"width: 100%\"\n      title=\"Yzqwzeg\"\n      src=\"https://codepen.io/yoksel/embed/Yzqwzeg?&default-tab=result\"\n    ></iframe>\n\n<p>В отличие от <code>em</code>, <code>rem</code> всегда содержит размер шрифта только корневого элемента, поэтому вложенность ни на что не влияет:</p>\n<iframe height=\"350\"\n      style=\"width: 100%\"\n      title=\"Nested rem\"\n      src=\"https://codepen.io/yoksel/embed/wvGMBMg?&default-tab=result\"\n    ></iframe>\n\n<p>Это позволяет делать компоненты, размеры которых привязаны к базовому размеру шрифта, но не зависят от вложенности элементов друг в друга.</p>\n<h3>Единицы измерения, привязанные к размерам экрана</h3>\n\n<table>\n<tr>\n  <td><code>vw</code></td>\n  <td>1% ширины вьюпорта</td>\n</tr>\n<tr>\n  <td><code>vh</code></td>\n  <td>1% высоты вьюпорта</td>\n</tr>\n<tr>\n  <td><code>vmin</code></td>\n  <td>1% от <i>меньшего</i> из <code>vw</code> и <code>vh</code></td>\n</tr>\n<tr>\n  <td><code>vmax</code></td>\n  <td>1% от <i>большего</i> из <code>vw</code> и <code>vh</code></td>\n</tr>\n</table>\n\n<p>Эти единицы предназначены для создания элементов, размер которых должен зависеть от размера окна (вьюпорта).</p>\n<p><code>100vh</code> — это высота вьюпорта, очень удобно для элементов, которые должны растягиваться на всю страницу. Вот пример простой галереи, где каждая картинка будет полностью занимать один экран независимо от размеров окна браузера:</p>\n<iframe height=\"500\"\n      style=\"width: 100%\"\n      title=\"Simple gallery with vh\"\n      src=\"https://codepen.io/yoksel/embed/KKzVwmQ?&default-tab=result\"\n    ></iframe>\n\n<p>Размеры картинок задаются вот таким образом:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">IMG</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100vh<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">object-fit</span><span class=\"token punctuation\">:</span> cover<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></figure>\n<p>Ширина вьюпорта — <code>100vw</code>. Это значение позволяет растянуть на ширину экрана любой элемент при любой вложенность.</p>\n<p>Если задать элементу ширину <code>100%</code>, получится ширина родителя, который, скорее всего, занимает только часть экрана, а <code>100vw</code> позволяет растянуть именно на ширину окна браузера не обращая внимания на размеры родительских элементов.</p>\n<p>Правда, тут есть проблема: <code>100vw</code> — это ширина всего окна вместе с полосой прокрутки, а доступная для контента ширина окна полосу прокрутки не включает, из-за чего при попытке задать элементам ширину вьюпорта появится горизонтальный скролл:</p>\n<iframe height=\"550\"\n      style=\"width: 100%\"\n      title=\"ZEWQQBR\"\n      src=\"https://codepen.io/yoksel/embed/ZEWQQBR?&default-tab=result\"\n    ></iframe>\n\n<p>Если нет возможности изменить вёрстку, чтобы избежать использования <code>100vw</code>, можно задать <code>overflow-x: hidden</code> ближайшему родителю, растянутому на ширину страницы:</p>\n<iframe height=\"550\"\n      style=\"width: 100%\"\n      title=\"XWdXXow\"\n      src=\"https://codepen.io/yoksel/embed/XWdXXow?&default-tab=result\"\n    ></iframe>\n\n<p>Проблема с полосами прокрутки будет видна только в десктопных браузерах, потому что на мобильных скроллбар размещается поверх страницы и не занимает пространство.</p>\n<p>Если вы верстаете на MacOS, и полосы прокрутки исчезают сами по себе, выберите в <strong>System Perefences/General</strong> опцию «Показывать всегда», это позволит верстать страницы сразу с учетом сколлбаров:</p>\n<p><img\n  src=\"/assets/img/articles/size-units/always-scroll.png\"\n  alt=\"Включить отображение полосы прокрутки на MacOS\"\n  loading=\"lazy\"\n  width=\"550\"\n/></p>\n<p>Используя <code>vw</code> и <code>vh</code> можно делать полностью резиновые элементы, которые будут сами подстраиваться под размер окна, например, так:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.text</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 5vh 5vw<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> paleturquoise<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">repeating-linear-gradient</span><span class=\"token punctuation\">(</span>-45deg<span class=\"token punctuation\">,</span>\n    <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>255<span class=\"token punctuation\">,</span>255<span class=\"token punctuation\">,</span>255<span class=\"token punctuation\">,</span> .25<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>255<span class=\"token punctuation\">,</span>255<span class=\"token punctuation\">,</span>255<span class=\"token punctuation\">,</span> .25<span class=\"token punctuation\">)</span> 2vw<span class=\"token punctuation\">,</span>\n    transparent 0<span class=\"token punctuation\">,</span> transparent 4vw\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 12vw<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></figure>\n<iframe height=\"350\"\n      style=\"width: 100%\"\n      title=\"Flexible block with viewport units\"\n      src=\"https://codepen.io/yoksel/embed/WNwrrVK?&default-tab=result\"\n    ></iframe>\n\n<p>Лучше всего открыть это <a href=\"https://codepen.io/yoksel/full/WNwrrVK\">демо</a> в отдельной вкладке и порастягивать окно браузера.</p>\n<p>С помощью <code>vmin</code> можно сделать элемент, который всегда будет целиком помещаться в экран, сохраняя пропорции:</p>\n<iframe height=\"350\"\n      style=\"width: 100%\"\n      title=\"Always visible element with vmin\"\n      src=\"https://codepen.io/yoksel/embed/ZEWQKpd?&default-tab=result\"\n    ></iframe>\n\n<p>Это <a href=\"https://codepen.io/yoksel/full/ZEWQKpd\">демо</a> тоже лучше смотреть в отдельной вкладке, попробуйте порастягивать окно по вертикали и по горизонтали.</p>\n<p>В отличие от единиц, привязанных к шрифту, единицы вьюпорта не реагируют на масштабирование страницы. Откройте <a href=\"https://codepen.io/yoksel/full/mdPVYpq\">это демо</a> и поизменяйте масштаб используя <code>Ctrl+</code>/<code>Ctrl-</code>. Текст, размер которого задан в <code>rem</code>, будет увеличиваться и уменьшаться, текст с размером, заданным в <code>vw</code>, останется неизменным.</p>\n<p>Пример с единицами вьюпорта ведёт себя совершенно логично, потому что масштабирование не меняет размер окна. Об этой особенности нужно помнить, если вы захотите использовать единицы вьюпорта для задания размера текста — пользователь не сможет сделать такой текст покрупнее.</p>\n<p>В качестве решения предлагается примешивать единицы вьюпорта к относительным единицам измерения, привязанным к размеру шрифта, например, так:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">html</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>1em + 0.5vw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>1.1em + 0.5vw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></figure>\n<p>Вживую можно потестить <a href=\"https://codepen.io/mirisuzanne/pen/39ad1e5d872446c97a09565a6d16d81e\">здесь</a>, пример взят из <a href=\"https://css-tricks.com/fun-viewport-units/\">этой статьи</a>. Больше про управление размером шрифта с помощью единиц вьюпорта можно почитать <a href=\"https://css-tricks.com/snippets/css/fluid-typography/\">тут</a>.</p>\n<p>За дополнение про особенности масштабирования спасибо <a href=\"https://twitter.com/bekharsky/status/1294181157572169728\">@bekharsky</a>.</p>\n<p>У единиц, привязанных к размерам вьюпорта, могут быть проблемы с поддержкой в IE включая 11-й, поэтому обязательно проверяйте код в действующем браузере.</p>\n<p>В спецификации описано немного больше единиц измерения, например:</p>\n<ul>\n<li><code>cap</code> — высота заглавной буквы</li>\n<li><code>lh</code> — высота строки</li>\n<li><code>rlh</code> — высота строки корневого элемента</li>\n</ul>\n<p>Но в данный момент они нигде не поддерживаются, поэтому в статье не рассматриваются.</p>\n<p>Спасибо <a href=\"https://twitter.com/SelenIT2\">Илье Стрельцыну</a> за полезные ссылки.</p>\n","links":[{"href":"https://www.w3.org/TR/css-values-4/#lengths","text":"Distance Units: the <length> type"},{"href":"https://developer.mozilla.org/en-US/docs/Web/CSS/length","text":"CSS <length>"},{"href":"https://en.wikipedia.org/wiki/Point_(typography)","text":"Point (typography)"},{"href":"https://lists.w3.org/Archives/Public/www-style/1998Dec/0030.html","text":"platform-specific font size issues","desc":"Mailing lists, 15 Dec 1998"},{"href":"https://lists.w3.org/Archives/Public/www-style/2010Jan/0058.html","text":"Making pt a non-physical unit","desc":"Mailing lists, 6 Jan 2010"},{"href":"https://lists.w3.org/Archives/Public/www-style/2010Jun/0461.html","text":"[CSS21] Issue 149 - px vs. pt","desc":"Mailing lists, 16 Jun 2010"},{"href":"https://www.w3.org/Style/Examples/007/units.ru.html","text":"em, px, pt, cm, in…"},{"href":"https://meyerweb.com/eric/thoughts/2018/06/28/what-is-the-css-ch-unit/","text":"What is the CSS ‘ch’ Unit?"},{"href":"https://css-tricks.com/the-lengths-of-css/","text":"The Lengths of CSS"},{"href":"https://hacks.mozilla.org/2013/09/css-length-explained/","text":"CSS Length Explained"},{"href":"https://www.webdesignerdepot.com/2010/02/the-myth-of-dpi/","text":"The Myth of DPI"},{"href":"https://webkit.org/blog/57/css-units/","text":"CSS Units"},{"href":"https://snook.ca/archives/html_and_css/font-size-with-rem","text":"Font sizing with rem"},{"href":"https://css-live.ru/articles/novye-i-starye-edinicy-izmereniya-kratkij-obzor.html","text":"Новые и старые единицы измерения (краткий обзор)"},{"href":"https://www.sitepoint.com/css-viewport-units-quick-start/","text":"CSS Viewport Units: A Quick Start"},{"href":"https://css-tricks.com/snippets/css/fluid-typography/","text":"Fluid Typography"},{"href":"https://css-tricks.com/fun-viewport-units/","text":"Fun with Viewport Units"},{"href":"https://css-tricks.com/simple-little-use-case-vmin/","text":"Simple Little Use Case for `vmin`"}],"tags":["fonts","units","text"],"navItems":[{"id":"absolute-units","text":"Абсолютные единицы измерения","level":0},{"id":"relative-units","text":"Относительные единицы измерения","level":0}],"date":"2020-08-13"},"posts":[{"date":"2020-09-26","href":"/css-math","text":"Математические функции в CSS","type":"post"},{"date":"2020-09-24","href":"/adaptive-video-with-css-math","text":"Адаптивное видео с помощью встроенных математических функций CSS","type":"post"},{"date":"2020-08-30","href":"/inaccessibility","text":"Недоступность в картинках","type":"post"},{"date":"2020-08-13","href":"/size-units","text":"Единицы размеров в CSS","type":"post"},{"date":"2020-07-27","href":"/color-themes-generator","text":"Генератор цветовых тем","type":"post"},{"date":"2020-07-25","href":"/jekyll-gatsby","text":"Jekyll → Gatsby","type":"post"},{"date":"2018-06-18","href":"/opentype-variable-fonts","text":"Вариативные шрифты","type":"post"},{"date":"2017-08-15","href":"/svg-sizes","text":"Размеры в SVG","type":"post"},{"date":"2017-01-13","href":"/adaptive-pixel-perfect","text":"Адаптивный Pixel Perfect","type":"post"},{"date":"2016-12-20","href":"/a11y-for-logotypes","text":"Логотип не отвечает или временно недоступен","type":"post"},{"date":"2016-11-23","href":"/svg-patterns","text":"SVG-паттерны","type":"post"},{"date":"2016-08-18","href":"/svg-bubble","text":"Мыльные пузыри на SVG","type":"post"},{"date":"2016-08-11","href":"/svg-gradients","text":"SVG-градиенты","type":"post"},{"date":"2016-02-12","href":"/funny-little-console","text":"Весёлая консолька","type":"post"},{"date":"2016-02-04","href":"/svg-masks","text":"SVG-маски","type":"post"},{"date":"2015-07-06","href":"/scroll-snap","text":"Умная прокрутка со Scroll Snap Points","type":"post"},{"date":"2014-08-11","href":"/css-animation-algorithms","text":"CSS-анимации для ротации изображений","type":"post"},{"date":"2014-08-10","href":"/animated-svg-mask","text":"Анимированные SVG-маски","type":"post"},{"date":"2014-07-26","href":"/svg-stroke","text":"Странности обводки в SVG","type":"post"},{"date":"2014-07-08","href":"/svg-preloaders","text":"SVG-прелоадеры","type":"post"},{"date":"2014-07-04","href":"/animated-gradients-2","text":"Анимируем градиенты ещё раз","type":"post"},{"date":"2014-06-15","href":"/background-blend-mode","text":"Background-blend-mode","type":"post"},{"date":"2014-04-17","href":"/svg-decoration","text":"Возможности оформления SVG","type":"post"},{"date":"2014-04-12","href":"/css-and-svg-masks","text":"CSS и SVG маски","type":"post"},{"date":"2014-04-06","href":"/nth-child","text":"Nth-child и nth-of-type","type":"post"},{"date":"2014-03-29","href":"/svg-icons","text":"SVG-иконки","type":"post"},{"date":"2014-03-27","href":"/svg-fill-and-stroke","text":"SVG: заливка и обводка","type":"post"},{"date":"2014-03-23","href":"/svg-path","text":"SVG-path","type":"post"},{"date":"2014-03-22","href":"/svg-groups-use","text":"SVG: группировка и переиспользование элементов","type":"post"},{"date":"2014-03-21","href":"/svg-shapes","text":"SVG-фигуры и трансформации","type":"post"},{"date":"2014-03-19","href":"/svg","text":"SVG","type":"post"},{"date":"2014-03-04","href":"/3d-and-gradients","text":"СSS-градиенты и 3D","type":"post"},{"date":"2014-02-23","href":"/shadowpainter","text":"Рисовалка анимированных теней","type":"post"},{"date":"2014-02-12","href":"/new-patterns","text":"Свежие CSS-паттерны","type":"post"},{"date":"2014-02-07","href":"/css-patterns","text":"CSS-паттерны","type":"post"},{"date":"2014-02-05","href":"/radial-gradients","text":"Радиальные градиенты","type":"post"},{"date":"2014-02-04","href":"/linear-gradients","text":"Линейные градиенты","type":"post"},{"date":"2014-01-25","href":"/tic-tac-toe","text":"Крестики-нолики на CSS","type":"post"},{"date":"2014-01-22","href":"/border-image","text":"Border-image","type":"post"},{"date":"2014-01-19","href":"/digital-watch","text":"Электронные часы на CSS и JS.","type":"post"},{"date":"2014-01-03","href":"/specifity","text":"Сколько весят селекторы?","type":"post"},{"date":"2014-01-02","href":"/unicode","text":"Символы юникода","type":"post"},{"date":"2013-12-22","href":"/content","text":"Свойство content","type":"post"},{"date":"2013-12-16","href":"/animation-for-gradients","text":"Анимируем CSS-градиенты","type":"post"},{"date":"2013-12-09","href":"/text-effects","text":"Текстовые эффекты","type":"post"},{"date":"2013-11-27","href":"/list-like-tree","text":"Древовидный список на CSS","type":"post"},{"date":"2013-11-20","href":"/css-selectors-part2","text":"Css-селекторы, часть 2","type":"post"},{"date":"2013-11-16","href":"/css-selectors","text":"Css-селекторы","type":"post"},{"date":"2013-10-22","href":"/kontekst-nalozheniya","text":"Контекст наложения","type":"post"},{"date":"2013-10-09","href":"/box-sizing","text":"Box-sizing","type":"post"},{"date":"2013-10-09","href":"/dva-sposoba-proshit-e-lement-po-krayu","text":"Два способа \"прошить\" элемент по краю","type":"post"},{"date":"2013-10-06","href":"/tsveta","text":"Цвета в CSS","type":"post"},{"date":"2013-10-04","href":"/fon-pod-strochkami-dobavlyaem-polya","text":"Фон под строчками: добавляем поля","type":"post"},{"date":"2013-09-29","href":"/box-shadow","text":"Box-shadow","type":"post"},{"date":"2013-09-27","href":"/css-figury-lepestok","text":"Css-фигуры: лепесток","type":"post"},{"date":"2013-09-26","href":"/3d-cube","text":"3D-куб","type":"post"},{"date":"2013-09-26","href":"/css-animation","text":"Css Animation","type":"post"},{"date":"2013-09-26","href":"/transform","text":"Transform","type":"post"},{"date":"2013-09-17","href":"/border-radius","text":"Border-radius","type":"post"},{"date":"2013-09-10","href":"/first-letter","text":"First letter","type":"post"},{"date":"2013-09-06","href":"/css-figury","text":"CSS-фигуры","type":"post"},{"date":"2013-09-06","href":"/eti-glaza-naprotiv","text":"Эти глаза напротив","type":"post"},{"date":"2013-09-04","href":"/strelki-s-pomoshh-yu-svojstva-border","text":"Стрелки с помощью свойства border","type":"post"},{"date":"2013-09-03","href":"/flexbox","text":"Flexbox","type":"post"}],"pages":[{"date":"2014-03-19","type":"page","href":"/pages/svg-links","text":"SVG: полезные ссылки"},{"date":"2013-11-16","type":"page","href":"/pages/css-selectors","text":"CSS-селекторы одной таблицей"},{"date":"2013-10-06","type":"page","href":"/pages/tablitsa-imenovanny-h-tsvetov","text":"Таблица именованных цветов"},{"date":"2013-09-27","type":"page","href":"/pages/transform-functions","text":"Функции Transform"},{"date":"2013-09-26","type":"page","href":"/pages/svojstva-animation","text":"Свойства Animation одной таблицей"},{"date":"2013-09-26","type":"page","href":"/pages/svojstva-transform","text":"Свойства Transform"},{"date":"2013-09-04","type":"page","href":"/pages/razny-j-sintaksis-flexbox","text":"Разный синтаксис Flexbox"},{"date":"2013-09-03","type":"page","href":"/pages/svojstva-flexbox","text":"Свойства Flexbox одной таблицей"}],"prevNext":{"prev":{"date":"2020-07-27","href":"/color-themes-generator","text":"Генератор цветовых тем","type":"post","id":"previous"},"next":{"date":"2020-08-30","href":"/inaccessibility","text":"Недоступность в картинках","type":"post","id":"next"}}},"__N_SSG":true}