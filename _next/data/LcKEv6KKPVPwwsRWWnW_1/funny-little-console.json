{"pageProps":{"article":{"title":"Весёлая консолька","slug":"funny-little-console","content":"<p>Недавно мне пришлось отлаживать очень капризный скрипт, в котором, по ощущениям, происходили какие-то паранормальные явления. Чтобы найти проблему, понадобилось вывести в консоль браузера большое количество отладочной информации. С одной стороны, так стало удобнее искать ошибку, с другой — содержимое консоли превратилось в бесконечную колбасу однообразного текста, и с этим надо было что-то делать.</p>\n<p>Должна сказать, что я довольно редко пишу Javascript, поэтому заинтересовавшись возможностями консоли узнала много нового.</p>\n<p>Чтобы просто вывести что-то в консоль, используется <code>console.log()</code>:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">'Что-нибудь'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></figure>\n<img src=\"/assets/img/articles/funny-console/fig1.png\" alt=\"Что-нибудь\">\n\n<p>Таким образом можно выводить любые типы данных — строки, числа, массивы, объекты:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'Главный вопрос жизни вселенной и всего такого'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> fruitsList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pear'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'banana'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> fruitsObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">'apple'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">seeds</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">'pear'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">seeds</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">'banana'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'yellow'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">seeds</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span> str <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span> num <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span> fruitsList <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span> fruitsObj <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></figure>\n<img src=\"/assets/img/articles/funny-console/fig2.png\" alt=\"Вывод разных типов данных\">\n\n<p>Код подсвечен, вложенные элементы объектов свёрнуты.</p>\n<p>Как этот вывод можно улучшить? Мы видим в консоли содержимое переменных, но не видим их названий. Самый очевидный способ — добавить название перед выводимыми данными:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">'Строка: '</span> <span class=\"token operator\">+</span> str <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">'Число: '</span> <span class=\"token operator\">+</span> num <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">'Массив: '</span> <span class=\"token operator\">+</span> fruitsList <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">'Объект: '</span> <span class=\"token operator\">+</span> fruitsObj <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></figure>\n<img src=\"/assets/img/articles/funny-console/fig3.png\" alt=\"Добавляем названия\">\n\n<p>При этом все значения переменных приведутся к строке. Для строк и чисел это не проблема, массив потеряет подсветку, хотя и останется читабельным, а вот объект превратится в строку [object Object], и содержимое объекта теперь нельзя ни прочитать, ни развернуть.</p>\n<p>Так себе вариант, есть способ получше: можно передавать в <code>console.log()</code> список переменных, разделённых запятой, и в этом случае они будут выведены корректно:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">'Строка:'</span><span class=\"token punctuation\">,</span> str <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">'Число:'</span><span class=\"token punctuation\">,</span> num <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">'Массив:'</span><span class=\"token punctuation\">,</span> fruitsList <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">'Объект:'</span><span class=\"token punctuation\">,</span> fruitsObj <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></figure>\n<img src=\"/assets/img/articles/funny-console/fig4.png\" alt=\"А теперь правильно\">\n\n<p>И так тоже можно:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">'Всё сразу:'</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">,</span> fruitsList<span class=\"token punctuation\">,</span> fruitsObj <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></figure>\n<img src=\"/assets/img/articles/funny-console/fig5.png\" alt=\"Всё сразу\">\n\n<p>Передаваемые переменные можно выводить не только одну за другой, но и в более управляемом виде:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">'Сначала строчка: \"%s\", потом число: %i'</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">,</span> num <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></figure>\n<img src=\"/assets/img/articles/funny-console/fig6.png\" alt=\"Изменяем вывод\">\n\n<p>Переменные точно также передаются в функцию списком, а для их вставки в конкретное место строки используются указатели, которые заодно отвечают и за формат вывода:</p>\n<p><code>%s</code> — в виде строки;\n<code>%d</code> или <code>%i</code> — в виде числа;\n<code>%f</code> — в виде числа с плавающей точкой;\n<code>%o</code> — в виде разворачиваемого DOM-элемента;\n<code>%O</code> — в виде разворачиваемого JavaScript-объекта;\n<code>%c</code> — оформляет вывод с соответствии с CSS, переданным дополнительным параметром.</p>\n<p>Переменные перед выводом в консоль приводятся к заданному формату. При этом важно правильно выбрать подходящий указатель, потому что иначе результат может получиться некорректным или просто нечитабельным:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'Главный вопрос жизни вселенной и всего такого'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> float <span class=\"token operator\">=</span> <span class=\"token number\">12.34</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> fruitsList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pear'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'banana'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">'str: %i: '</span><span class=\"token punctuation\">,</span> str <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">'float: %i'</span><span class=\"token punctuation\">,</span> float <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">'fruitsList: %O:'</span><span class=\"token punctuation\">,</span> fruitsList <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></figure>\n<img src=\"/assets/img/articles/funny-console/fig7.png\" alt=\"Неверные форматы\">\n\n<p>Строка не смогла привестись к числу, и получилось <code>NaN</code>, число с плавающей точкой потеряло свою десятичную часть, а массив вывелся в виде разворачиваемого объекта, и теперь придется кликнуть, чтобы увидеть его содержимое.</p>\n<p>Форматы <code>%o</code> и <code>%O</code> особенно полезны для вывода элементов страницы:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> h1Elem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">'%o'</span><span class=\"token punctuation\">,</span> h1Elem <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">'%O'</span><span class=\"token punctuation\">,</span> h1Elem <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></figure>\n<img src=\"/assets/img/articles/funny-console/fig8.png\" alt=\"Разный вывод DOM-элементов\">\n\n<p>В первом случае выведется код элемента, во втором — Javascript-объект. При этом если нет необходимости выводить вспомогательный текст, аналогичный результат можно получить воспользовавшись просто <code>console.log()</code> и <code>console.dir()</code>:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span> h1Elem <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// код элемента</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span> <span class=\"token punctuation\">(</span> h1Elem <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Javascript-объект</span>\n</code></pre></figure>\n<p>Результат работы этого кода будет таким же, как на скрине выше.</p>\n<p>Из всех указателей мне больше всего полюбился последний: <code>%c</code> — стилизующий текст, потому что именно он помог мне привести однообразную колбасу в консоли в более-менее читабельный вид.</p>\n<p>Для того, чтобы задать оформление тексту, CSS-код нужно передать отдельным параметром, причем первым параметром в этом случае должна быть строка с указателями, вторым — строка с CSS, третьим — данные, которые нужно вывести.</p>\n<p>Пример:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'Главный вопрос жизни вселенной и всего такого'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">'%c%s'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'color: green; font: 1.2rem/1 Tahoma;'</span><span class=\"token punctuation\">,</span> str <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></figure>\n<img src=\"/assets/img/articles/funny-console/fig9.png\" alt=\"Зеленый текст\">\n\n<p>Ещё удобнее будет вынести стили в отдельную переменную, тогда их можно будет использовать повторно:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'Главный вопрос жизни вселенной и всего такого'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> style <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'padding: 1rem;'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'background: linear-gradient( gold, orangered);'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'text-shadow: 0 2px orangered;'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'font: 1.3rem/3 Georgia;'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'color: white;'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">'%c%s'</span><span class=\"token punctuation\">,</span> style<span class=\"token punctuation\">,</span> str <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></figure>\n<img src=\"/assets/img/articles/funny-console/fig10.png\" alt=\"Оранжевый градиент\">\n\n<p>Так можно управлять отступами, фоном и оформлением текста. Какие-то штуки работать не будут, например, <code>box-shadow</code>, но и того, что есть, вполне достаточно, чтобы добавить в консоль немного красоты:</p>\n<img src=\"/assets/img/articles/funny-console/rainbow.png\" alt=\"Радуга\">\n(<a href=\"http://stackoverflow.com/questions/7505623/colors-in-javascript-console/21457293#21457293\" target=\"_blank\">Отсюда</a>)\n\n<p>Для своих целей я заготовила несколько стилей:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> consoleStyles <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n <span class=\"token string-property property\">'h1'</span><span class=\"token operator\">:</span> <span class=\"token string\">'font: 2.5em/1 Arial; color: crimson;'</span><span class=\"token punctuation\">,</span>\n <span class=\"token string-property property\">'h2'</span><span class=\"token operator\">:</span> <span class=\"token string\">'font: 2em/1 Arial; color: orangered;'</span><span class=\"token punctuation\">,</span>\n <span class=\"token string-property property\">'h3'</span><span class=\"token operator\">:</span> <span class=\"token string\">'font: 1.5em/1 Arial; color: olivedrab;'</span><span class=\"token punctuation\">,</span>\n <span class=\"token string-property property\">'bold'</span><span class=\"token operator\">:</span> <span class=\"token string\">'font: bold 1.3em/1 Arial; color: midnightblue;'</span><span class=\"token punctuation\">,</span>\n <span class=\"token string-property property\">'warn'</span><span class=\"token operator\">:</span> <span class=\"token string\">'padding: 0 .5rem; background: crimson; font: 1.6em/1 Arial; color: white;'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></figure>\n<p>и функцию, которая избавила меня от необходимости формировать руками набор параметров и форматирование строки:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">log</span> <span class=\"token punctuation\">(</span> <span class=\"token parameter\">msg<span class=\"token punctuation\">,</span> style</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>style <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>consoleStyles<span class=\"token punctuation\">[</span> style <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    style <span class=\"token operator\">=</span> <span class=\"token string\">'bold'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">'%c'</span> <span class=\"token operator\">+</span> msg<span class=\"token punctuation\">,</span> consoleStyles<span class=\"token punctuation\">[</span> style <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></figure>\n<p>Пример использования:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">'Заголовок 1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'h1'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">log</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">'Заголовок 2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'h2'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">log</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">'Заголовок 3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'h3'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">log</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">'Жирный текст'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bold'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">log</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">'Ошибка'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'warn'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></figure>\n<img src=\"/assets/img/articles/funny-console/fig11.png\" alt=\"Заголовки\">\n\n<p>Таким образом из вот такой колбасы скучного текста</p>\n<img src=\"/assets/img/articles/funny-console/fig12.png\" alt=\"Некрашеная консоль\">\n\n<p>можно получить вот такое:</p>\n<img src=\"/assets/img/articles/funny-console/fig13.png\" alt=\"Разноцветная консоль\">\n\n<p>По-моему, так гораздо лучше, особенно если отладочной информации много и в ней легко потеряться.</p>\n<p>Чтобы использовать в одной строке несколько стилей, надо каждый из них указать отдельным параметром, а затем с помощью <code>%c</code> задавать в тексте начало нового стиля:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> styles <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n<span class=\"token string\">'background: red'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'background: orange'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'background: gold'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'background: yellowgreen'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'background: skyblue'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'background: steelblue'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'background: darkviolet'</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">'%c R %c A %c I %c N %c B %c O %c W '</span><span class=\"token punctuation\">,</span>\n  styles<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> styles<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> styles<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> styles<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  styles<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> styles<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> styles<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></figure>\n<img src=\"/assets/img/articles/funny-console/fig21.png\" alt=\"Rainbow\">\n\n<p>Чтобы покрасить только часть строки, один из стилей можно задать пустым:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">'%c text1 %c text2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'color: crimson;'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></figure>\n<img src=\"/assets/img/articles/funny-console/fig22.png\" alt=\"Двухцветный текст\">\n\n<p>Если не хочется заморачиваться с раскрашиванием, для вывода большого количества данных можно воспользоваться <code>console.table()</code>:</p>\n<img src=\"/assets/img/articles/funny-console/fig14.png\" alt=\"Таблицы\">\n\n<p>Может, таблица выглядит не очень читабельно, но всё же это лучше списка свёрнутых объектов, к тому же она позволяет окинуть взглядом сразу весь массив.</p>\n<p>Также можно выделять из общего потока отдельные строчки, используя <code>console.info()</code> и <code>console.warn()</code>:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">info</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">'your text'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">'your text'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></figure>\n<img src=\"/assets/img/articles/funny-console/fig15.png\" alt=\"warn & info\">\n\n<p>Они работают как обычный <code>console.log()</code>, только добавляют иконки в начало строки (а <code>console.warn()</code> ещё и фон).</p>\n<p>Ещё можно выводить сообщения об ошибке и дополнительную отладочную информацию. Например, с помощью <code>console.error()</code>:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">'Houston, we have a problem'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></figure>\n<img src=\"/assets/img/articles/funny-console/fig16.png\" alt=\"console.error()\">\n\n<p><code>console.error()</code> ничего не проверяет, она просто выводит сообщение, оформленное определённым образом. Чтобы сообщение выводилось только при соблюдении заданных условий, можно использовать <code>console.assert()</code>:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> fruitsObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">'apple'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">seeds</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> expression <span class=\"token operator\">=</span> fruitsObj<span class=\"token punctuation\">.</span>apple<span class=\"token punctuation\">.</span>color <span class=\"token operator\">===</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">assert</span> <span class=\"token punctuation\">(</span> expression<span class=\"token punctuation\">,</span> <span class=\"token string\">'There is no blue apple'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></figure>\n<p>Сообщение будет выведено только если <code>expression</code> будет равно <code>false</code>:</p>\n<img src=\"/assets/img/articles/funny-console/fig17.png\" alt=\"console.assert()\">\n\n<p>Чтобы просто вывести в консоль сообщение с отладочной информацией, можно использовать <code>console.trace()</code>:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">trace</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">'Hello'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></figure>\n<img src=\"/assets/img/articles/funny-console/fig18.png\" alt=\"console.trace()\">\n\n<p>Для визуальной группировки сообщений можно использовать <code>console.group()</code> и <code>console.groupEnd()</code>, обозначающие начало и конец группы соответственно:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">group</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">'Animals'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">'cat'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">'dog'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">groupEnd</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></figure>\n<img src=\"/assets/img/articles/funny-console/fig19.png\" alt=\"console.group()\">\n\n<p>Чтобы группа была по умолчанию свёрнута, вместо <code>console.group()</code> используется <code>console.groupCollapsed()</code>.</p>\n<p>А ещё можно подсчитывать вызовы функций с помощью <code>console.count()</code>:</p>\n<figure aria-label=\"Пример кода\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">count</span> <span class=\"token punctuation\">(</span> <span class=\"token string\">'myFunc() called'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">myFunc</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></figure>\n<img src=\"/assets/img/articles/funny-console/fig20.png\" alt=\"console.count()\">\n\n<p>В консоли можно делать и другие интересные вещи, вроде измерения времени выполнения кода. Также умные ребята для отладки используют <code>debugger</code> и точки остановки (breakpoints), но это уже совсем другая история.</p>\n","links":[{"href":"https://developers.google.com/web/tools/chrome-devtools/debug/console/console-reference","text":"Console API Reference"},{"href":"https://developer.mozilla.org/en-US/docs/Web/API/Console","text":"developer.mozilla.org/en-US/docs/Web/API/Console"}],"tags":["js","tools"],"navItems":[],"date":"2016-02-12"},"posts":[{"date":"2020-09-26","href":"/css-math","text":"Математические функции в CSS","type":"post"},{"date":"2020-09-24","href":"/adaptive-video-with-css-math","text":"Адаптивное видео с помощью встроенных математических функций CSS","type":"post"},{"date":"2020-08-30","href":"/inaccessibility","text":"Недоступность в картинках","type":"post"},{"date":"2020-08-13","href":"/size-units","text":"Единицы размеров в CSS","type":"post"},{"date":"2020-07-27","href":"/color-themes-generator","text":"Генератор цветовых тем","type":"post"},{"date":"2020-07-25","href":"/jekyll-gatsby","text":"Jekyll → Gatsby","type":"post"},{"date":"2018-06-18","href":"/opentype-variable-fonts","text":"Вариативные шрифты","type":"post"},{"date":"2017-08-15","href":"/svg-sizes","text":"Размеры в SVG","type":"post"},{"date":"2017-01-13","href":"/adaptive-pixel-perfect","text":"Адаптивный Pixel Perfect","type":"post"},{"date":"2016-12-20","href":"/a11y-for-logotypes","text":"Логотип не отвечает или временно недоступен","type":"post"},{"date":"2016-11-23","href":"/svg-patterns","text":"SVG-паттерны","type":"post"},{"date":"2016-08-18","href":"/svg-bubble","text":"Мыльные пузыри на SVG","type":"post"},{"date":"2016-08-11","href":"/svg-gradients","text":"SVG-градиенты","type":"post"},{"date":"2016-02-12","href":"/funny-little-console","text":"Весёлая консолька","type":"post"},{"date":"2016-02-04","href":"/svg-masks","text":"SVG-маски","type":"post"},{"date":"2015-07-06","href":"/scroll-snap","text":"Умная прокрутка со Scroll Snap Points","type":"post"},{"date":"2014-08-11","href":"/css-animation-algorithms","text":"CSS-анимации для ротации изображений","type":"post"},{"date":"2014-08-10","href":"/animated-svg-mask","text":"Анимированные SVG-маски","type":"post"},{"date":"2014-07-26","href":"/svg-stroke","text":"Странности обводки в SVG","type":"post"},{"date":"2014-07-08","href":"/svg-preloaders","text":"SVG-прелоадеры","type":"post"},{"date":"2014-07-04","href":"/animated-gradients-2","text":"Анимируем градиенты ещё раз","type":"post"},{"date":"2014-06-15","href":"/background-blend-mode","text":"Background-blend-mode","type":"post"},{"date":"2014-04-17","href":"/svg-decoration","text":"Возможности оформления SVG","type":"post"},{"date":"2014-04-12","href":"/css-and-svg-masks","text":"CSS и SVG маски","type":"post"},{"date":"2014-04-06","href":"/nth-child","text":"Nth-child и nth-of-type","type":"post"},{"date":"2014-03-29","href":"/svg-icons","text":"SVG-иконки","type":"post"},{"date":"2014-03-27","href":"/svg-fill-and-stroke","text":"SVG: заливка и обводка","type":"post"},{"date":"2014-03-23","href":"/svg-path","text":"SVG-path","type":"post"},{"date":"2014-03-22","href":"/svg-groups-use","text":"SVG: группировка и переиспользование элементов","type":"post"},{"date":"2014-03-21","href":"/svg-shapes","text":"SVG-фигуры и трансформации","type":"post"},{"date":"2014-03-19","href":"/svg","text":"SVG","type":"post"},{"date":"2014-03-04","href":"/3d-and-gradients","text":"СSS-градиенты и 3D","type":"post"},{"date":"2014-02-23","href":"/shadowpainter","text":"Рисовалка анимированных теней","type":"post"},{"date":"2014-02-12","href":"/new-patterns","text":"Свежие CSS-паттерны","type":"post"},{"date":"2014-02-07","href":"/css-patterns","text":"CSS-паттерны","type":"post"},{"date":"2014-02-05","href":"/radial-gradients","text":"Радиальные градиенты","type":"post"},{"date":"2014-02-04","href":"/linear-gradients","text":"Линейные градиенты","type":"post"},{"date":"2014-01-25","href":"/tic-tac-toe","text":"Крестики-нолики на CSS","type":"post"},{"date":"2014-01-22","href":"/border-image","text":"Border-image","type":"post"},{"date":"2014-01-19","href":"/digital-watch","text":"Электронные часы на CSS и JS.","type":"post"},{"date":"2014-01-03","href":"/specifity","text":"Сколько весят селекторы?","type":"post"},{"date":"2014-01-02","href":"/unicode","text":"Символы юникода","type":"post"},{"date":"2013-12-22","href":"/content","text":"Свойство content","type":"post"},{"date":"2013-12-16","href":"/animation-for-gradients","text":"Анимируем CSS-градиенты","type":"post"},{"date":"2013-12-09","href":"/text-effects","text":"Текстовые эффекты","type":"post"},{"date":"2013-11-27","href":"/list-like-tree","text":"Древовидный список на CSS","type":"post"},{"date":"2013-11-20","href":"/css-selectors-part2","text":"Css-селекторы, часть 2","type":"post"},{"date":"2013-11-16","href":"/css-selectors","text":"Css-селекторы","type":"post"},{"date":"2013-10-22","href":"/kontekst-nalozheniya","text":"Контекст наложения","type":"post"},{"date":"2013-10-09","href":"/box-sizing","text":"Box-sizing","type":"post"},{"date":"2013-10-09","href":"/dva-sposoba-proshit-e-lement-po-krayu","text":"Два способа \"прошить\" элемент по краю","type":"post"},{"date":"2013-10-06","href":"/tsveta","text":"Цвета в CSS","type":"post"},{"date":"2013-10-04","href":"/fon-pod-strochkami-dobavlyaem-polya","text":"Фон под строчками: добавляем поля","type":"post"},{"date":"2013-09-29","href":"/box-shadow","text":"Box-shadow","type":"post"},{"date":"2013-09-27","href":"/css-figury-lepestok","text":"Css-фигуры: лепесток","type":"post"},{"date":"2013-09-26","href":"/3d-cube","text":"3D-куб","type":"post"},{"date":"2013-09-26","href":"/css-animation","text":"Css Animation","type":"post"},{"date":"2013-09-26","href":"/transform","text":"Transform","type":"post"},{"date":"2013-09-17","href":"/border-radius","text":"Border-radius","type":"post"},{"date":"2013-09-10","href":"/first-letter","text":"First letter","type":"post"},{"date":"2013-09-06","href":"/css-figury","text":"CSS-фигуры","type":"post"},{"date":"2013-09-06","href":"/eti-glaza-naprotiv","text":"Эти глаза напротив","type":"post"},{"date":"2013-09-04","href":"/strelki-s-pomoshh-yu-svojstva-border","text":"Стрелки с помощью свойства border","type":"post"},{"date":"2013-09-03","href":"/flexbox","text":"Flexbox","type":"post"}],"pages":[{"date":"2014-03-19","type":"page","href":"/pages/svg-links","text":"SVG: полезные ссылки"},{"date":"2013-11-16","type":"page","href":"/pages/css-selectors","text":"CSS-селекторы одной таблицей"},{"date":"2013-10-06","type":"page","href":"/pages/tablitsa-imenovanny-h-tsvetov","text":"Таблица именованных цветов"},{"date":"2013-09-27","type":"page","href":"/pages/transform-functions","text":"Функции Transform"},{"date":"2013-09-26","type":"page","href":"/pages/svojstva-animation","text":"Свойства Animation одной таблицей"},{"date":"2013-09-26","type":"page","href":"/pages/svojstva-transform","text":"Свойства Transform"},{"date":"2013-09-04","type":"page","href":"/pages/razny-j-sintaksis-flexbox","text":"Разный синтаксис Flexbox"},{"date":"2013-09-03","type":"page","href":"/pages/svojstva-flexbox","text":"Свойства Flexbox одной таблицей"}],"prevNext":{"prev":{"date":"2016-02-04","href":"/svg-masks","text":"SVG-маски","type":"post","id":"previous"},"next":{"date":"2016-08-11","href":"/svg-gradients","text":"SVG-градиенты","type":"post","id":"next"}}},"__N_SSG":true}